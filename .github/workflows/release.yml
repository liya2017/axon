name: Release
on:
  push:
    tags:
      - v*.*.*
    # branches:
    #   - "main"
jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: version
        id: version
        run: |
          tag=${GITHUB_REF/refs\/tags\//}
          version=${tag#v}
          major=${version%%.*}
          echo "tag=${tag}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "major=${major}" >> $GITHUB_OUTPUT
      - run: |
          echo ${{ steps.version.outputs.major }}
          echo ${{ steps.version.outputs.tag }}

  package:    
    runs-on: ${{ matrix.job.os }}
    needs:
      - version
    strategy:
      matrix:
        job:
          - os: macos-12
            target: x86_64-apple-darwin
            use-cross: false
            REL_PKG: x86_64-apple-darwin.zip
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          #   use-cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: false
            REL_PKG: x86_64-unknown-linux-gnu.tar.gz
    steps:
      - name: Installing Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          profile: minimal
          override: true
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Add rust target
        run: rustup target add ${{ matrix.job.target }}
      - run: |
          cargo build --release --target ${{ matrix.job.target }}
          ls
          echo "=====ls target===="
          ls target
          echo "=====ls release===="
          ls target/release
          echo "=====ls ${{ matrix.job.target }}===="
          ls target/${{ matrix.job.target }}
          echo "=====ls x86_64-unknown-linux-gnu/release===="
          ls target/${{ matrix.job.target }}/release
          rm -rf releases
          mkdir releases
          PKG_NAME="axon_${{ needs.version.outputs.tag }}_${{ matrix.job.REL_PKG%%.*}}"
          mkdir "releases/$PKG_NAME"
          cp "target/${{ matrix.job.target }}/release/axon" "releases/$PKG_NAME"
          cp "devtools/chain/default.db-options" "releases/$PKG_NAME"
          cp "devtools/chain/genesis_single_node.json" "releases/$PKG_NAME"
          cp "devtools/chain/nodes/genesis_multi_nodes.json" "releases/$PKG_NAME"
          cp README.md "releases/$PKG_NAME"
          cp -R docs "releases/$PKG_NAME"
          cp core/api/README.md "releases/$PKG_NAME/docs/rpc.md"
          pushd releases
          if [ "{{ matrix.job.target }}" = "x86_64-unknown-linux-gnu" ]; then
            tar -czf $PKG_NAME.tar.gz $PKG_NAME
          else
            zip -r $PKG_NAME.zip $PKG_NAME
          fi
          popd
          echo "=====++++ls releases++++===="
          ls "releases"
          mv ${{ github.workspace }}/releases/axon_${{ needs.version.outputs.tag }}_${{ matrix.job.REL_PKG}} ${{ github.workspace }}
      - name: upload-zip-file
        uses: actions/upload-artifact@v2
        with:
          name: axon_${{ needs.version.outputs.tag }}_{{ matrix.job.target }}.*
          path: axon_${{ needs.version.outputs.tag }}_{{ matrix.job.target }}.*   
  Upload-release-files:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - REL_PKG: x86_64-unknown-linux-gnu.tar.gz
          - REL_PKG: x86_64-apple-darwin.zip
    needs:
      - version
      - package
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare - Download tar
        uses: actions/download-artifact@v2
        with:
          name: axon_${{ needs.version.outputs.tag }}_${{ matrix.REL_PKG }}
      - run: |
          pwd
          ls    
      - uses: release-drafter/release-drafter@master
        id: release
        with:
          version: ${{ needs.version.outputs.tag }}
          publish: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload tar assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          # asset_name: ckb_${{env.GIT_TAG_NAME}}_${{ matrix.REL_PKG }}
          asset_name: axon_${{ needs.version.outputs.tag }}_${{ matrix.REL_PKG }}
          asset_path: ${{ github.workspace }}/axon_${{ needs.version.outputs.tag }}_${{ matrix.REL_PKG }}
          asset_content_type: application/octet-stream

      - name: force update major tag
        run: |
          git tag v${{ steps.version.outputs.major }} ${{ steps.version.outputs.tag }} -f
          git push origin refs/tags/v${{ steps.version.outputs.major }} -f